{"ast":null,"code":"var _jsxFileName = \"/home/edson/Documents/React/udemy/seasons/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Loader from \"./Loader\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: null,\n      errorMessage: ''\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"My component was rendered to the screen\");\n    window.navigator.geolocation.getCurrentPosition(position => this.setState({\n      lat: position.coords.latitude\n    }), err => this.setState({\n      errorMessage: err.message\n    }));\n  }\n\n  componentDidUpdate() {\n    console.log(\"My component was just updated - it rerendered!\");\n  }\n\n  renderContent() {\n    if (this.state.lat && !this.state.errorMessage) {\n      // return <div>Latitude: {this.state.lat}</div>\n      return /*#__PURE__*/_jsxDEV(SeasonDisplay, {\n        lat: this.state.lat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 14\n      }, this);\n    }\n\n    if (!this.state.lat && this.state.errorMessage) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", this.state.errorMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Loader, {\n      message: \"Please accept location request\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  }\n\n  render() {}\n\n}\n\n;\n\nif (module.hot) {\n  module.hot.accept();\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 52,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/edson/Documents/React/udemy/seasons/src/index.js"],"names":["React","ReactDOM","Loader","SeasonDisplay","App","Component","state","lat","errorMessage","componentDidMount","console","log","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","message","componentDidUpdate","renderContent","render","module","hot","accept","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAShCC,KATgC,GASxB;AAAEC,MAAAA,GAAG,EAAE,IAAP;AAAaC,MAAAA,YAAY,EAAE;AAA3B,KATwB;AAAA;;AAWhCC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACAC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CACEC,QAAQ,IAAI,KAAKC,QAAL,CAAc;AAAEV,MAAAA,GAAG,EAAES,QAAQ,CAACE,MAAT,CAAgBC;AAAvB,KAAd,CADd,EAEEC,GAAG,IAAI,KAAKH,QAAL,CAAc;AAAET,MAAAA,YAAY,EAAEY,GAAG,CAACC;AAApB,KAAd,CAFT;AAID;;AAEDC,EAAAA,kBAAkB,GAAG;AACnBZ,IAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AACD;;AAEDY,EAAAA,aAAa,GAAG;AACd,QAAI,KAAKjB,KAAL,CAAWC,GAAX,IAAkB,CAAC,KAAKD,KAAL,CAAWE,YAAlC,EAAgD;AAC9C;AACA,0BAAO,QAAC,aAAD;AAAe,QAAA,GAAG,EAAE,KAAKF,KAAL,CAAWC;AAA/B;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAED,QAAI,CAAC,KAAKD,KAAL,CAAWC,GAAZ,IAAmB,KAAKD,KAAL,CAAWE,YAAlC,EAAgD;AAC9C,0BAAO;AAAA,8BAAa,KAAKF,KAAL,CAAWE,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAED,wBAAO,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAEDgB,EAAAA,MAAM,GAAG,CAER;;AAtC+B;;AAuCjC;;AAED,IAAIC,MAAM,CAACC,GAAX,EAAgB;AACdD,EAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX;AACD;;AAGD1B,QAAQ,CAACuB,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Loader from \"./Loader\";\nimport SeasonDisplay from \"./SeasonDisplay\";\n\nclass App extends React.Component {\n  // LONG METHOD USING CONSTRUCTOR\n  /* constructor(props) {\n    super(props);\n\n    this.state = { lat: null, errorMessage: '' };\n  } */\n\n  // SHORTCUT EQUIVALENT OF CONSTRUCTOR METHOD\n  state = { lat: null, errorMessage: '' };\n\n  componentDidMount() {\n    console.log(\"My component was rendered to the screen\")\n    window.navigator.geolocation.getCurrentPosition(\n      position => this.setState({ lat: position.coords.latitude }),\n      err => this.setState({ errorMessage: err.message  })\n    );\n  }\n\n  componentDidUpdate() {\n    console.log(\"My component was just updated - it rerendered!\")\n  }\n\n  renderContent() {\n    if (this.state.lat && !this.state.errorMessage) {\n      // return <div>Latitude: {this.state.lat}</div>\n      return <SeasonDisplay lat={this.state.lat} />\n    }\n\n    if (!this.state.lat && this.state.errorMessage) {\n      return <div>Error: {this.state.errorMessage}</div>\n    }\n\n    return <Loader message=\"Please accept location request\" />\n  }\n\n  render() {  \n\n  };\n};\n\nif (module.hot) {\n  module.hot.accept();\n}\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"]},"metadata":{},"sourceType":"module"}